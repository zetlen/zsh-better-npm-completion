#compdef npm

zbnc_npm_command() {
  echo "${words[2]}"
}

zbnc_no_of_npm_args() {
  echo "$#words"
}

zbnc_list_cached_modules() {
  ls ~/.npm 2>/dev/null
}

zbnc_npm_command_arg() {
  echo "${words[3]}"
}

zbnc_recursively_look_for() {
  local filename="$1"
  local dir=$PWD
  while [ ! -e "$dir/$filename" ]; do
    dir=${dir%/*}
    [[ "$dir" = "" ]] && break
  done
  [[ ! "$dir" = "" ]] && echo "$dir/$filename"
}

zbnc_get_package_json_property_object() {
  local package_json="$1"
  local property="$2"
  cat "$package_json" |
  sed -nE "/^  \"$property\": \{$/,/^  \},?$/p" | # Grab scripts object
  sed '1d;$d' |                                   # Remove first/last lines
  sed -E 's/    "([^"]+)": "(.+)",?/\1=>\2/'      # Parse into key=>value
}

zbnc_get_package_json_property_object_keys() {
  local package_json="$1"
  local property="$2"
  zbnc_get_package_json_property_object "$package_json" "$property" | cut -f 1 -d "="
}

zbnc_parse_package_json_for_deps() {
  local package_json="$1"
  zbnc_get_package_json_property_object_keys "$package_json" dependencies
  zbnc_get_package_json_property_object_keys "$package_json" devDependencies
}

zbnc_parse_package_json_for_script_suggestions() {
  local package_json="$1"
  zbnc_get_package_json_property_object "$package_json" scripts |
  sed -E 's/(.+)=>(.+)/\1:$ \2/' |  # Parse commands into suggestions
  sed 's/\(:\)[^$]/\\&/g' |         # Escape ":" in commands
  sed 's/\(:\)$[^ ]/\\&/g'          # Escape ":$" without a space in commands
}

### NPM completion

__npm() {
  # Store custom completion status
  local custom_completion=false

  # Load custom completion commands
  case "$(zbnc_npm_command)" in
    i|install)
      # Only run on `npm install ?`
      [[ ! "$(zbnc_no_of_npm_args)" = "3" ]] && return

      # Return if we don't have any cached modules
      [[ "$(zbnc_list_cached_modules)" = "" ]] && return

      # If we do, recommend them
      _values $(zbnc_list_cached_modules)

      # Make sure we don't run default completion
      custom_completion=true
      ;;
    r|uninstall)
      # Use default npm completion to recommend global modules
      [[ "$(zbnc_npm_command_arg)" = "-g" ]] ||  [[ "$(zbnc_npm_command_arg)" = "--global" ]] && return

      # Look for a package.json file
      local package_json="$(zbnc_recursively_look_for package.json)"

      # Return if we can't find package.json
      [[ "$package_json" = "" ]] && return

      _values $(zbnc_parse_package_json_for_deps "$package_json")

      # Make sure we don't run default completion
      custom_completion=true
      ;;
    run)
      # Only run on `npm run ?`
      [[ ! "$(zbnc_no_of_npm_args)" = "3" ]] && return

      # Look for a package.json file
      local package_json="$(zbnc_recursively_look_for package.json)"

      # Return if we can't find package.json
      [[ "$package_json" = "" ]] && return

      # Parse scripts in package.json
      local -a options
      options=(${(f)"$(zbnc_parse_package_json_for_script_suggestions $package_json)"})

      # Return if we can't parse it
      [[ "$#options" = 0 ]] && return

      # Load the completions
      _describe 'values' options

      # Make sure we don't run default completion
      custom_completion=true
      ;;
  esac

  # Fall back to default completion if we haven't done a custom one
  if [[ $custom_completion = false ]]; then
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
        COMP_LINE=$BUFFER \
        COMP_POINT=0 \
        npm completion -- "${words[@]}" \
      2>/dev/null)
  fi
}

__npm "$@"